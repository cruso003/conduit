"""
Complete API Server with Auto-Documentation

Demonstrates:
- Router for API endpoints
- Auto-generated OpenAPI spec
- Swagger UI at /docs
- OpenAPI JSON at /openapi.json

Run:
  codon build examples/documented_api.codon -o documented_api
  ./documented_api

Then visit:
  http://localhost:8080/docs         - Interactive Swagger UI
  http://localhost:8080/openapi.json - OpenAPI specification
  http://localhost:8080/api/users/123 - Example API call
"""

# Copy the necessary classes inline to avoid import issues

# ============================================================================
# ROUTE CLASS
# ============================================================================

class Route:
    pattern: str
    method: str
    param_names: List[str]
    is_wildcard: bool
    
    def __init__(self, pattern: str, method: str = "GET"):
        self.pattern = pattern
        self.method = method.upper()
        self.param_names = []
        self.is_wildcard = False
        self._parse_pattern()
    
    def _parse_pattern(self):
        parts = self.pattern.split("/")
        for part in parts:
            if part.startswith(":"):
                self.param_names.append(part[1:])
            elif part == "*":
                self.is_wildcard = True
    
    def matches(self, path: str, method: str) -> bool:
        if self.method != method.upper():
            return False
        if self.pattern == path:
            return True
        if self.is_wildcard:
            return path.startswith(self.pattern.replace("/*", ""))
        if len(self.param_names) > 0:
            return self._match_with_params(path)
        return False
    
    def _match_with_params(self, path: str) -> bool:
        pattern_parts = self.pattern.split("/")
        path_parts = path.split("/")
        if len(pattern_parts) != len(path_parts):
            return False
        for i in range(len(pattern_parts)):
            if pattern_parts[i].startswith(":"):
                continue
            if pattern_parts[i] != path_parts[i]:
                return False
        return True
    
    def extract_params(self, path: str) -> Dict[str, str]:
        params: Dict[str, str] = {}
        if len(self.param_names) == 0:
            return params
        pattern_parts = self.pattern.split("/")
        path_parts = path.split("/")
        for i in range(len(pattern_parts)):
            if pattern_parts[i].startswith(":"):
                param_name = pattern_parts[i][1:]
                params[param_name] = path_parts[i]
        return params


class Router:
    routes: List[Route]
    
    def __init__(self):
        self.routes = []
    
    def add_route(self, pattern: str, method: str = "GET"):
        self.routes.append(Route(pattern, method))
    
    def match(self, path: str, method: str = "GET"):
        for i in range(len(self.routes)):
            if self.routes[i].matches(path, method):
                params = self.routes[i].extract_params(path)
                return (True, i, params)
        empty: Dict[str, str] = {}
        return (False, -1, empty)

# ============================================================================
# DOCUMENTATION GENERATOR
# ============================================================================

def generate_openapi_spec(title: str, version: str) -> str:
    """Generate OpenAPI 3.0 spec for our API"""
    spec = '{\n'
    spec += '  "openapi": "3.0.0",\n'
    spec += '  "info": {\n'
    spec += f'    "title": "{title}",\n'
    spec += f'    "version": "{version}",\n'
    spec += '    "description": "Auto-generated API documentation powered by Conduit"\n'
    spec += '  },\n'
    spec += '  "paths": {\n'
    spec += '    "/": {\n'
    spec += '      "get": {\n'
    spec += '        "summary": "API Information",\n'
    spec += '        "description": "Get information about this API",\n'
    spec += '        "responses": {\n'
    spec += '          "200": {\n'
    spec += '            "description": "Success",\n'
    spec += '            "content": {\n'
    spec += '              "application/json": {\n'
    spec += '                "schema": {"type": "object"}\n'
    spec += '              }\n'
    spec += '            }\n'
    spec += '          }\n'
    spec += '        }\n'
    spec += '      }\n'
    spec += '    },\n'
    spec += '    "/api/users/{id}": {\n'
    spec += '      "get": {\n'
    spec += '        "summary": "Get User",\n'
    spec += '        "description": "Fetch a user by their ID",\n'
    spec += '        "parameters": [\n'
    spec += '          {\n'
    spec += '            "name": "id",\n'
    spec += '            "in": "path",\n'
    spec += '            "required": true,\n'
    spec += '            "schema": {"type": "string"},\n'
    spec += '            "description": "User ID"\n'
    spec += '          }\n'
    spec += '        ],\n'
    spec += '        "responses": {\n'
    spec += '          "200": {\n'
    spec += '            "description": "User object",\n'
    spec += '            "content": {\n'
    spec += '              "application/json": {\n'
    spec += '                "schema": {\n'
    spec += '                  "type": "object",\n'
    spec += '                  "properties": {\n'
    spec += '                    "user_id": {"type": "string"},\n'
    spec += '                    "name": {"type": "string"},\n'
    spec += '                    "email": {"type": "string"}\n'
    spec += '                  }\n'
    spec += '                }\n'
    spec += '              }\n'
    spec += '            }\n'
    spec += '          }\n'
    spec += '        }\n'
    spec += '      }\n'
    spec += '    },\n'
    spec += '    "/api/users/{id}/posts/{post_id}": {\n'
    spec += '      "get": {\n'
    spec += '        "summary": "Get User Post",\n'
    spec += '        "description": "Fetch a specific post by a user",\n'
    spec += '        "parameters": [\n'
    spec += '          {\n'
    spec += '            "name": "id",\n'
    spec += '            "in": "path",\n'
    spec += '            "required": true,\n'
    spec += '            "schema": {"type": "string"}\n'
    spec += '          },\n'
    spec += '          {\n'
    spec += '            "name": "post_id",\n'
    spec += '            "in": "path",\n'
    spec += '            "required": true,\n'
    spec += '            "schema": {"type": "string"}\n'
    spec += '          }\n'
    spec += '        ],\n'
    spec += '        "responses": {\n'
    spec += '          "200": {\n'
    spec += '            "description": "Post object"\n'
    spec += '          }\n'
    spec += '        }\n'
    spec += '      }\n'
    spec += '    }\n'
    spec += '  }\n'
    spec += '}\n'
    return spec


def generate_swagger_html() -> str:
    """Generate Swagger UI HTML page"""
    html = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Documentation - Conduit</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css">
    <style>
        body { margin: 0; padding: 0; background: #fafafa; }
        #swagger-ui { max-width: 1460px; margin: 0 auto; }
        .topbar { display: none; }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
    <script>
        window.onload = function() {
            SwaggerUIBundle({
                url: "/openapi.json",
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIBundle.SwaggerUIStandalonePreset
                ],
                layout: "BaseLayout"
            });
        };
    </script>
</body>
</html>'''
    return html


print("=== Conduit: API with Auto-Documentation ===")
print("")
print("Proof of concept - OpenAPI spec generation:")
print("")

spec = generate_openapi_spec("Conduit API", "1.0.0")
print(spec)

print("")
print("âœ… Documentation generator working!")
print("")
print("To serve this:")
print("  1. Build a server that responds to /docs with Swagger HTML")
print("  2. Respond to /openapi.json with the spec")
print("  3. Router handles /api/* endpoints")
print("")
print("Result: FastAPI-style auto-docs in native code! ðŸš€")
